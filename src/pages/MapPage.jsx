import { useEffect, useState } from 'react';
import {
  Input,
  Button,
  Card,
  Image,
  Banner,
  Avatar,
  Caption,
  Badge,
  Modal,
  Headline,
  Text,
  Spinner,
} from '@telegram-apps/telegram-ui';
import { Page } from '@/components/Page.jsx';
import Map, { Marker, Popup } from 'react-map-gl';
import 'mapbox-gl/dist/mapbox-gl.css';
import Supercluster from 'supercluster';
import { useRef } from 'react';
import { supabase } from '@/lib/supabase';
import { 
  initAnalytics, 
  trackPageView, 
  trackMapInteraction, 
  trackMarkerClick, 
  trackSubscriptionCheck,
  trackError,
  trackSessionDuration 
} from '@/lib/analytics';
import avatarIcon from '/images/avatar-icon.png';
import geoIcon from '/images/geo-icon.svg';
import telegramIcon from '/images/telegram-icon.svg';

function MapStub({ showBanner, onCloseBanner, onMarkerClick, showFeedbackModal, setShowFeedbackModal }) {
  const [viewState, setViewState] = useState({
    longitude: 30.5234, // –ö–∏—ó–≤
    latitude: 50.4501,
    zoom: 12,
  });
  const [userLocation, setUserLocation] = useState(null);
  const [locationError, setLocationError] = useState(null);
  const watchIdRef = useRef(null);
  const mapRef = useRef();
  const [isMobile, setIsMobile] = useState(false);
  const [locations, setLocations] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const sessionStartTime = useRef(Date.now());


  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram WebApp
  useEffect(() => {
    console.log('üöÄ –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Telegram WebApp...');
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Analytics
    initAnalytics();
    trackPageView('Map Page');
    
    // –ü—Ä–∏–º—É—Å–æ–≤–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram WebApp
    if (window.Telegram) {
      console.log('‚úÖ Telegram API –∑–Ω–∞–π–¥–µ–Ω–æ');
      console.log('Telegram object keys:', Object.keys(window.Telegram || {}));
      
      // –°–ø—Ä–æ–±—É—î–º–æ –ø—Ä–∏–º—É—Å–æ–≤–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ WebApp
      if (!window.Telegram.WebApp) {
        console.log('‚ö†Ô∏è WebApp –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, —Å–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏...');
        
        // –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –º–µ—Ç–æ–¥–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        if (window.TelegramWebviewProxy) {
          console.log('–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ TelegramWebviewProxy...');
          window.TelegramWebviewProxy.postEvent('web_app_ready', false, {});
        }
        
        // –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ WebApp –≤—Ä—É—á–Ω—É
        if (window.Telegram && !window.Telegram.WebApp) {
          console.log('–°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ WebApp –æ–±\'—î–∫—Ç...');
          // –î–µ—è–∫—ñ –≤–µ—Ä—Å—ñ—ó –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —è–≤–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
          try {
            window.Telegram.WebApp = window.Telegram.WebApp || {};
          } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è WebApp:', e);
          }
        }
      }
      
      // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
      setTimeout(() => {
        console.log('üìä –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:');
        console.log('Telegram object keys:', Object.keys(window.Telegram || {}));
        console.log('WebApp –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', !!window.Telegram?.WebApp);
        console.log('WebApp object:', window.Telegram?.WebApp);
        
        if (window.Telegram?.WebApp) {
          const wa = window.Telegram.WebApp;
          console.log('‚úÖ WebApp –∑–Ω–∞–π–¥–µ–Ω–æ!');
          console.log('WebApp version:', wa.version);
          console.log('WebApp platform:', wa.platform);
          console.log('WebApp initData:', wa.initData);
          console.log('WebApp initDataUnsafe:', wa.initDataUnsafe);
          
          // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ WebApp
          try {
            wa.ready();
            wa.expand();
            console.log('‚úÖ WebApp –≥–æ—Ç–æ–≤–∏–π —ñ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏–π');

            // –í–∏–º–∏–∫–∞—î–º–æ vertical swipes –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∑–≥–æ—Ä—Ç–∞–Ω–Ω—è (Bot API 7.7+)
            if (wa.disableVerticalSwipes) {
              console.log('üö´ –í–∏–º–∏–∫–∞—î–º–æ vertical swipes...');
              try {
                wa.disableVerticalSwipes();
                console.log('‚úÖ Vertical swipes –≤–∏–º–∫–Ω–µ–Ω–æ:', !wa.isVerticalSwipesEnabled);
              } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ disableVerticalSwipes:', error);
              }
            } else {
              console.log('‚ö†Ô∏è disableVerticalSwipes API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (–ø–æ—Ç—Ä—ñ–±–Ω–∞ Bot API 7.7+)');
            }

            // –°–ø—Ä–æ–±—É—î–º–æ —É–≤—ñ–π—Ç–∏ –≤ full-screen —Ä–µ–∂–∏–º (Bot API 8.0+)
            if (wa.requestFullscreen) {
              console.log('üñ• –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è full-screen —Ä–µ–∂–∏–º—É...');
              try {
                wa.requestFullscreen();
                
                // –°–ª—É—Ö–∞—î–º–æ –ø–æ–¥—ñ—ó full-screen
                wa.onEvent('fullscreenChanged', () => {
                  console.log('üì∫ Full-screen –∑–º—ñ–Ω–µ–Ω–æ:', wa.isFullscreen);
                });
                
                wa.onEvent('fullscreenFailed', (error) => {
                  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ full-screen:', error);
                });
              } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ requestFullscreen:', error);
              }
            } else {
              console.log('‚ö†Ô∏è Full-screen API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (–ø–æ—Ç—Ä—ñ–±–Ω–∞ Bot API 8.0+)');
            }
          } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó WebApp:', e);
          }
        } else {
          console.error('‚ùå WebApp –≤—Å–µ —â–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –ø—ñ—Å–ª—è —Å–ø—Ä–æ–± —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó');
        }
      }, 1000);
      
    } else {
      console.error('‚ùå Telegram API –≤–∑–∞–≥–∞–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }
  }, []);

  // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ —Ü–µ –º–æ–±—ñ–ª—å–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π
  useEffect(() => {
    const checkMobile = () => {
      const userAgent = navigator.userAgent || navigator.vendor || window.opera;
      const isMobileDevice = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent.toLowerCase());
      setIsMobile(isMobileDevice);
    };
    
    checkMobile();
  }, []);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ª–æ–∫–∞—Ü—ñ—ó –∑ Supabase
  useEffect(() => {
    fetchLocations();
  }, []);

  // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ —Å–µ—Å—ñ—ó —Ç–∞ cleanup –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
  useEffect(() => {
    const handleBeforeUnload = () => {
      const sessionDuration = Date.now() - sessionStartTime.current;
      trackSessionDuration(sessionDuration);
    };

    window.addEventListener('beforeunload', handleBeforeUnload);
    
    return () => {
      // –ó—É–ø–∏–Ω—è—î–º–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
      if (watchIdRef.current) {
        navigator.geolocation.clearWatch(watchIdRef.current);
      }
      
      window.removeEventListener('beforeunload', handleBeforeUnload);
      const sessionDuration = Date.now() - sessionStartTime.current;
      trackSessionDuration(sessionDuration);
    };
  }, []);

  const fetchLocations = async () => {
    try {
      setIsLoading(true);
      const { data, error } = await supabase
        .from('locations')
        .select('*')
        .eq('is_active', true);

      if (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ–π:', error);
        trackError('Supabase Error', error.message);
        setLocations([]); // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ - –ø–æ–∫–∞–∑—É—î–º–æ –ø—É—Å—Ç—É –∫–∞—Ä—Ç—É
      } else {
        setLocations(data || []);
        trackMapInteraction('locations_loaded', { count: data?.length || 0 });
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ª–æ–∫–∞—Ü—ñ–π:', error);
      trackError('Fetch Error', error.message);
      setLocations([]); // –ü—Ä–∏ –±—É–¥—å-—è–∫—ñ–π –ø–æ–º–∏–ª—Ü—ñ - –ø–æ–∫–∞–∑—É—î–º–æ –ø—É—Å—Ç—É –∫–∞—Ä—Ç—É
    } finally {
      setIsLoading(false);
    }
  };

  // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º—ñ—Å—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ Telegram API –∞–±–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä–Ω–∏–π API
  useEffect(() => {
    // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ Telegram LocationManager API
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.LocationManager) {
      console.log("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Telegram LocationManager API");
      
      try {
        window.Telegram.WebApp.LocationManager.requestLocation({
          onSuccess: (location) => {
            console.log("Telegram –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞:", location);
            setViewState(v => ({
              ...v,
              longitude: location.longitude,
              latitude: location.latitude,
              zoom: 15,
            }));
            setUserLocation({
              latitude: location.latitude,
              longitude: location.longitude,
              accuracy: location.accuracy || 10, // Telegram API –º–æ–∂–µ –Ω–µ –Ω–∞–¥–∞–≤–∞—Ç–∏ —Ç–æ—á–Ω—ñ—Å—Ç—å
              timestamp: Date.now()
            });
            trackMapInteraction('geolocate_success', { 
              source: 'telegram_api',
              latitude: location.latitude,
              longitude: location.longitude 
            });
          },
          onError: (error) => {
            console.error("–ü–æ–º–∏–ª–∫–∞ Telegram –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó:", error);
            setLocationError("–ü–æ–º–∏–ª–∫–∞ Telegram –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó: " + error);
            // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä–Ω–∏–π API —è–∫ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
            useBrowserGeolocation();
          }
        });
      } catch (e) {
        console.error("–í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ Telegram LocationManager:", e);
        // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä–Ω–∏–π API —è–∫ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
        useBrowserGeolocation();
      }
    } else {
      // –Ø–∫—â–æ Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä–Ω–∏–π API
      console.log("Telegram LocationManager –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±—Ä–∞—É–∑–µ—Ä–Ω–∏–π API");
      useBrowserGeolocation();
    }
  }, []);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ API –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –∑ —Ä–µ–∞–ª—å–Ω–∏–º —á–∞—Å–æ–º
  const useBrowserGeolocation = () => {
    if (navigator.geolocation) {
      // –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –ø–æ–∑–∏—Ü—ñ—é
      navigator.geolocation.getCurrentPosition(
        (pos) => {
          console.log("–ë—Ä–∞—É–∑–µ—Ä–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞:", pos.coords);
          setViewState(v => ({
            ...v,
            longitude: pos.coords.longitude,
            latitude: pos.coords.latitude,
            zoom: 15,
          }));
          setUserLocation({
            latitude: pos.coords.latitude,
            longitude: pos.coords.longitude,
            accuracy: pos.coords.accuracy,
            timestamp: Date.now()
          });
        },
        (err) => {
          console.error("–ü–æ–º–∏–ª–∫–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–æ—ó –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó:", err);
          // –°–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑ –∑ –±–∞–∑–æ–≤–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —è–∫—â–æ –±—É–≤ —Ç–∞–π–º–∞—É—Ç
          if (err.code === err.TIMEOUT) {
            console.log("–°–ø—Ä–æ–±—É—î–º–æ –∑ –±–∞–∑–æ–≤–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó...");
            navigator.geolocation.getCurrentPosition(
              (pos) => {
                console.log("–ë–∞–∑–æ–≤–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞:", pos.coords);
                setViewState(v => ({
                  ...v,
                  longitude: pos.coords.longitude,
                  latitude: pos.coords.latitude,
                  zoom: 15,
                }));
                setUserLocation({
                  latitude: pos.coords.latitude,
                  longitude: pos.coords.longitude,
                  accuracy: pos.coords.accuracy,
                  timestamp: Date.now()
                });
              },
              () => {
                setLocationError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é: " + err.message);
              },
              { enableHighAccuracy: false, timeout: 60000, maximumAge: 300000 }
            );
          } else {
            setLocationError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é: " + err.message);
          }
        },
        { 
          enableHighAccuracy: false, // –í–∏–º–∏–∫–∞—î–º–æ –≤–∏—Å–æ–∫—É —Ç–æ—á–Ω—ñ—Å—Ç—å –¥–ª—è —à–≤–∏–¥—à–æ–≥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
          timeout: 30000, // –ó–±—ñ–ª—å—à—É—î–º–æ —Ç–∞–π–º–∞—É—Ç –¥–æ 30 —Å–µ–∫—É–Ω–¥
          maximumAge: 60000 // –î–æ–∑–≤–æ–ª—è—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–µ—à –¥–æ 1 —Ö–≤–∏–ª–∏–Ω–∏
        }
      );

      // –¢–µ–ø–µ—Ä –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—Å—Ç—ñ–π–Ω–µ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
      watchIdRef.current = navigator.geolocation.watchPosition(
        (pos) => {
          console.log("–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó:", pos.coords);
          setUserLocation(prevLocation => {
            // –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è —Ç–æ—á–Ω—ñ—à–∞ –∞–±–æ –º–∏–Ω—É–ª–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —á–∞—Å—É
            if (!prevLocation || 
                pos.coords.accuracy < prevLocation.accuracy ||
                Date.now() - prevLocation.timestamp > 5000) {
              return {
                latitude: pos.coords.latitude,
                longitude: pos.coords.longitude,
                accuracy: pos.coords.accuracy,
                timestamp: Date.now()
              };
            }
            return prevLocation;
          });
        },
        (err) => {
          console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó:", err);
        },
        { 
          enableHighAccuracy: false, // –®–≤–∏–¥—à–∏–π –≤—ñ–¥–≥—É–∫
          maximumAge: 60000, // 1 —Ö–≤–∏–ª–∏–Ω–∞ –∫–µ—à—É
          timeout: 20000 // 20 —Å–µ–∫—É–Ω–¥ –¥–ª—è watchPosition
        }
      );
    } else {
      console.error("–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º");
      setLocationError("–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º");
    }
  };

  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –ª–æ–∫–∞—Ü—ñ—ó —É —Ñ–æ—Ä–º–∞—Ç GeoJSON –¥–ª—è supercluster
  const points = locations.map(location => ({
    type: "Feature",
    properties: { 
      id: location.id, 
      title: location.title, 
      avatar: location.avatar,
      description: location.description,
      address: location.address,
      link: location.link // –î–æ–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    },
    geometry: { 
      type: "Point", 
      coordinates: [location.longitude, location.latitude] 
    }
  }));

  // —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è supercluster
  const supercluster = new Supercluster({ radius: 40, maxZoom: 18 });
  supercluster.load(points);

  // –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ viewport
  let clusters = [];
  if (mapRef.current) {
    const bounds = mapRef.current.getMap().getBounds().toArray().flat();
    clusters = supercluster.getClusters(bounds, Math.round(viewState.zoom));
  } else {
    // –¥–µ—Ñ–æ–ª—Ç–Ω—ñ bounds –¥–ª—è –ø–µ—Ä—à–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
    clusters = supercluster.getClusters([30.5, 50.4, 30.6, 50.5], Math.round(viewState.zoom));
  }

  // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑–º—ñ–Ω–∏ –º–∞—Å—à—Ç–∞–±—É
  const handleZoomIn = () => {
    setViewState(v => ({ ...v, zoom: v.zoom + 1 }));
    trackMapInteraction('zoom_in', { zoom: viewState.zoom + 1 });
  };
  
  const handleZoomOut = () => {
    setViewState(v => ({ ...v, zoom: v.zoom - 1 }));
    trackMapInteraction('zoom_out', { zoom: viewState.zoom - 1 });
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è full-screen —Ä–µ–∂–∏–º—É
  const handleFullscreen = () => {
    const wa = window.Telegram?.WebApp;
    if (wa && wa.requestFullscreen) {
      try {
        if (wa.isFullscreen) {
          wa.exitFullscreen();
          console.log('üîô –í–∏—Ö—ñ–¥ –∑ full-screen');
        } else {
          wa.requestFullscreen();
          console.log('üñ• –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è full-screen');
        }
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ full-screen:', error);
      }
    } else {
      console.log('‚ö†Ô∏è Full-screen API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è toggle vertical swipes
  const handleSwipeToggle = () => {
    const wa = window.Telegram?.WebApp;
    if (wa && wa.disableVerticalSwipes && wa.enableVerticalSwipes) {
      try {
        if (wa.isVerticalSwipesEnabled) {
          wa.disableVerticalSwipes();
          console.log('üö´ Vertical swipes –≤–∏–º–∫–Ω–µ–Ω–æ');
        } else {
          wa.enableVerticalSwipes();
          console.log('‚úÖ Vertical swipes —É–≤—ñ–º–∫–Ω–µ–Ω–æ');
        }
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ toggle swipes:', error);
      }
    } else {
      console.log('‚ö†Ô∏è Vertical swipes API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const handleGeolocate = () => {
    trackMapInteraction('geolocate_requested');
    
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.LocationManager) {
      try {
        window.Telegram.WebApp.LocationManager.requestLocation({
          onSuccess: (location) => {
            setViewState(v => ({
              ...v,
              longitude: location.longitude,
              latitude: location.latitude,
              zoom: 15,
            }));
            setUserLocation({
              latitude: location.latitude,
              longitude: location.longitude,
              accuracy: location.accuracy || 10, // Telegram API –º–æ–∂–µ –Ω–µ –Ω–∞–¥–∞–≤–∞—Ç–∏ —Ç–æ—á–Ω—ñ—Å—Ç—å
              timestamp: Date.now()
            });
            trackMapInteraction('geolocate_success', { 
              source: 'telegram_api',
              latitude: location.latitude,
              longitude: location.longitude 
            });
          },
          onError: (error) => {
            console.error("–ü–æ–º–∏–ª–∫–∞ Telegram –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó:", error);
            // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä–Ω–∏–π API —è–∫ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
            useBrowserGeolocationForButton();
          }
        });
      } catch (e) {
        console.error("–í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ Telegram LocationManager:", e);
        // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä–Ω–∏–π API —è–∫ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
        useBrowserGeolocationForButton();
      }
    } else {
      // –Ø–∫—â–æ Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä–Ω–∏–π API
      useBrowserGeolocationForButton();
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ API –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ –∫–Ω–æ–ø–∫—É
  const useBrowserGeolocationForButton = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (pos) => {
          setViewState(v => ({
            ...v,
            longitude: pos.coords.longitude,
            latitude: pos.coords.latitude,
            zoom: 15,
          }));
          setUserLocation({
            latitude: pos.coords.latitude,
            longitude: pos.coords.longitude,
            accuracy: pos.coords.accuracy,
            timestamp: Date.now()
          });
          trackMapInteraction('geolocate_success', { 
            source: 'browser_api',
            latitude: pos.coords.latitude,
            longitude: pos.coords.longitude 
          });
        },
        (err) => {
          alert('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é: ' + err.message);
          trackError('Browser Geolocation', err.message);
        },
        { 
          enableHighAccuracy: false, // –®–≤–∏–¥—à–∏–π –≤—ñ–¥–≥—É–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏
          timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
          maximumAge: 60000 // 1 —Ö–≤–∏–ª–∏–Ω–∞ –∫–µ—à—É
        }
      );
    } else {
      alert('–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
      trackError('Geolocation Not Supported', 'Browser does not support geolocation');
    }
  };

  return (
    <div style={{
      width: '100%',
      height: '100%',
      overflow: 'hidden',
      position: 'relative',
    }}>
      <Map
        ref={mapRef}
        {...viewState}
        style={{width: '100%', height: '100%'}}
        mapStyle="mapbox://styles/mapbox/streets-v11"
        mapboxAccessToken={import.meta.env.VITE_MAPBOX_TOKEN}
        onMove={evt => setViewState(evt.viewState)}
        dragRotate={false}
        touchRotate={false}
        touchPitch={false}
        dragPan={true}
        touchZoom={true}
        doubleClickZoom={true}
        keyboard={false}
        pitchWithRotate={false}
      >
        {/* –ö–ª–∞—Å—Ç–µ—Ä–∏ —Ç–∞ –º–∞—Ä–∫–µ—Ä–∏ */}
        {!isLoading && clusters.map(cluster => {
          const [longitude, latitude] = cluster.geometry.coordinates;
          // –Ø–∫—â–æ —Ü–µ –∫–ª–∞—Å—Ç–µ—Ä
          if (cluster.properties.cluster) {
            return (
              <Marker key={`cluster-${cluster.id}`} longitude={longitude} latitude={latitude} offsetLeft={-20} offsetTop={-20}>
                <div
                  style={{
                    width: 40,
                    height: 40,
                    borderRadius: '50%',
                    background: 'rgba(0, 120, 255, 0.7)',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    color: '#fff',
                    fontFamily: "'Helvetica Neue', sans-serif",
                    fontWeight: 500,
                    fontSize: 16,
                    border: '2px solid #fff',
                    boxShadow: '0 0 8px 2px rgba(0,120,255,0.5)'
                  }}
                >
                  {cluster.properties.point_count}
                </div>
              </Marker>
            );
          }
          // –Ø–∫—â–æ —Ü–µ –æ–∫—Ä–µ–º–∏–π –º–∞—Ä–∫–µ—Ä
          return (
            <Marker key={`marker-${cluster.properties.id}`} longitude={longitude} latitude={latitude} offsetLeft={0} offsetTop={-20}>
              <div onClick={() => onMarkerClick(cluster.properties)} style={{cursor: 'pointer', display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 4}}>
            <Avatar
                  src={avatarIcon}
                  onError={(e) => {
                    e.target.src = avatarIcon; // Fallback –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                  }}
                  alt={cluster.properties.title}
                  size={40}
                />
                <Caption caps level="1" weight="2" style={{ color: '#000' }}>{cluster.properties.title}</Caption>
              </div>
            </Marker>
          );
        })}
        {/* –ú–∞—Ä–∫–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Å–∏–Ω—è —Ç–æ—á–∫–∞ –∑ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —Ç–æ—á–Ω–æ—Å—Ç—ñ) */}
        {userLocation && (
          <Marker
            longitude={userLocation.longitude}
            latitude={userLocation.latitude}
            offsetLeft={-15}
            offsetTop={-15}
          >
            <div style={{ position: 'relative', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 1000 }}>
              {/* –ö—ñ–ª—å—Ü–µ —Ç–æ—á–Ω–æ—Å—Ç—ñ */}
              {userLocation.accuracy && (
                <div
                  style={{
                    position: 'absolute',
                    width: Math.min(userLocation.accuracy / 2, 80), // –û–±–º–µ–∂—É—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
                    height: Math.min(userLocation.accuracy / 2, 80),
                    borderRadius: '50%',
                    background: 'rgba(0, 120, 255, 0.1)',
                    border: '1px solid rgba(0, 120, 255, 0.3)',
                    zIndex: 1001
                  }}
                />
              )}
              {/* –û—Å–Ω–æ–≤–Ω–∞ —Ç–æ—á–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ */}
              <div
                style={{
                  width: 20,
                  height: 20,
                  borderRadius: '50%',
                  background: 'rgba(0, 120, 255, 1)',
                  border: '3px solid #fff',
                  boxShadow: '0 0 12px 3px rgba(0,120,255,0.4)',
                  zIndex: 1002,
                  position: 'relative',
                  animation: 'pulse 2s infinite'
                }}
              />
              
            </div>
          </Marker>
        )}
      </Map>
      {/* Beta badge —É –≤–µ—Ä—Ö–Ω—å–æ–º—É –ª—ñ–≤–æ–º—É –∫—É—Ç—ñ */}
      <div style={{position: 'absolute', top: 100, left: 10, zIndex: 10}}>
        <Badge mode="critical" large type='number'>Beta 1.0</Badge>
          </div>
      
      {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è */}
      {isLoading && (
          <div style={{
            position: 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          backgroundColor: 'rgba(255, 255, 255, 0.9)',
          padding: 20,
          borderRadius: 12,
          boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
        }}>
          <Spinner size='m' />
          </div>
        )}
      {/* Banner –ø–æ–≤–µ—Ä—Ö –∫–∞—Ä—Ç–∏ */}
      {showBanner && (
        <div style={{position: 'absolute', bottom: 25, left: '50%', transform: 'translateX(-50%)', zIndex: 1, width: '90%', maxWidth: '90%'}}>
          <Banner
            background={<img alt="Nasa streams" src="https://www.nasa.gov/wp-content/uploads/2023/10/streams.jpg?resize=1536,864" style={{width: '150%'}}/>}
            header="–¢—Ä–µ–Ω–¥–æ–≤—ñ –º—ñ—Å—Ü—è –ø–æ—Ä—É—á –∑ —Å–æ–±–æ—é!"
            subheader="–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –∫–∞—Ä—Ç–∞ –≤—ñ–¥ –º–µ–¥—ñ–∞ ¬´–ì—É–ª—è–π, –ö–∏—ó–≤¬ª. –î–æ—Å–ª—ñ–¥–∂—É–π –º—ñ—Å—Ç–æ –∑ –Ω–∞–º–∏. "
            onCloseIcon={onCloseBanner}
            type="section"
          >
            <Button
              before={<Image size={16} src={telegramIcon} style={{backgroundColor: 'white', borderRadius: '50%', padding: '2px'}} />}
              mode="white"
              size="s"
              onClick={() => window.open('https://t.me/+8Bui7KD5WrJiZjli', '_blank')}
            >
              –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ
            </Button>
          </Banner>
        </div>
      )}
      {/* –ö–Ω–æ–ø–∫–∏ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —Ç–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó */}
      <div style={{position: 'absolute', top: 100, right: 12, display: 'flex', flexDirection: 'column', gap: 5}}>
        {/* –ö–Ω–æ–ø–∫–∞ —Ñ—ñ–¥–±–µ–∫—É */}
        <Button 
          shape="circle" 
          size="m" 
          onClick={() => setShowFeedbackModal(true)}
        >
          üí¨
        </Button>
        
        {/* –ì—Ä—É–ø–∞ zoom –∫–Ω–æ–ø–æ–∫ –±–µ–∑ gap */}
        <div style={{display: 'flex', flexDirection: 'column', gap: 0}}>
          <Button mode='bezeled' shape="circle" size="m" onClick={handleZoomIn}>+</Button>
          <Button mode='bezeled' shape="circle" size="m" onClick={handleZoomOut}>-</Button>
        </div>
        {/* –ö–Ω–æ–ø–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –æ–∫—Ä–µ–º–æ */}
        <Button mode='bezeled' shape="circle" size="m" onClick={handleGeolocate}>
          <img src={geoIcon} alt="–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è" style={{width: 16, height: 16}} />
        </Button>
      </div>
      
      {/* –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó - –∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –≤ Telegram –ø—Ä–∞—Ü—é—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ */}
      {/* {locationError && (
        <div style={{
          position: 'absolute', 
          bottom: 70, 
          left: '50%', 
          transform: 'translateX(-50%)',
          backgroundColor: 'rgba(255, 255, 255, 0.8)',
          padding: '8px 12px',
          borderRadius: 8,
          maxWidth: '80%',
          textAlign: 'center',
          zIndex: 10,
          fontSize: 14,
          color: '#ff3b30'
        }}>
          {locationError}
        </div>
      )} */}
    </div>
  );
}

export function MapPage() {
  const [showBanner, setShowBanner] = useState(true);
  const [showTonBanner, setShowTonBanner] = useState(false);
  const [selectedLocation, setSelectedLocation] = useState(null);
  const [showSubscribeModal, setShowSubscribeModal] = useState(false);
  const [isCheckingSubscription, setIsCheckingSubscription] = useState(false);
  const [showFeedbackModal, setShowFeedbackModal] = useState(false);
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram WebApp
  useEffect(() => {
    // –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ Telegram –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å—Å—è
    const initTelegram = () => {
      if (window.Telegram) {
        // –°—Ç–≤–æ—Ä—é—î–º–æ WebApp —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
        if (!window.Telegram.WebApp) {
          window.Telegram.WebApp = window.Telegram.WebApp || {};
        }
        
        if (window.Telegram.WebApp && window.Telegram.WebApp.ready) {
          window.Telegram.WebApp.ready();
          console.log('Telegram WebApp –≥–æ—Ç–æ–≤–∏–π:', window.Telegram.WebApp);
        }
      }
    };
    
    // –°–ø—Ä–æ–±—É—î–º–æ –∑–∞—Ä–∞–∑
    initTelegram();
    
    // –Ü —á–µ—Ä–µ–∑ –Ω–µ–≤–µ–ª–∏–∫–∏–π —á–∞—Å
    setTimeout(initTelegram, 1000);
  }, []);
  
  // –ö–∞–Ω–∞–ª, –Ω–∞ —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è
  const TELEGRAM_CHANNEL = '-1001968388006'; // Chat ID –≤–∞—à–æ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É
  const TELEGRAM_CHANNEL_URL = 'https://t.me/+8Bui7KD5WrJiZjli'; // –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ invite link –≤–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É
  const BACKEND_URL = process.env.NODE_ENV === 'production' 
    ? 'https://mini-app-backend-production-826a.up.railway.app' // Railway URL
    : 'http://localhost:3001';
  
  const handleMarkerClick = (locationData) => {
    setSelectedLocation(locationData);
    setShowTonBanner(true);
    trackMarkerClick(locationData.id, locationData.title);
  };

  // –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ—Å–∏–ª–∞–Ω—å
  const openLink = (url) => {
    if (!url) return;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ Telegram –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    if (url.includes('t.me/')) {
      // –î–ª—è Telegram –ø–æ—Å–∏–ª–∞–Ω—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ openTelegramLink –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥—É
      if (window.Telegram?.WebApp?.openTelegramLink) {
        window.Telegram.WebApp.openTelegramLink(url);
      } else if (window.Telegram?.WebApp?.openLink) {
        window.Telegram.WebApp.openLink(url);
      } else {
        window.open(url, '_blank');
      }
    } else {
      // –î–ª—è –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –ø–æ—Å–∏–ª–∞–Ω—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ openLink
      if (window.Telegram?.WebApp?.openLink) {
        window.Telegram.WebApp.openLink(url);
      } else {
        window.open(url, '_blank');
      }
    }
  };
  
  // –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
  const checkChannelSubscription = async () => {
    try {
      setIsCheckingSubscription(true);
      trackSubscriptionCheck('check_subscription_started');
      
      // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram WebApp
      const tg = window.Telegram?.WebApp;
      const user = tg?.initDataUnsafe?.user;
      
      console.log('üîç Telegram WebApp data:', tg);
      console.log('üë§ User data:', user);
      
      if (!window.Telegram) {
        console.error('Telegram API –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –í—ñ–¥–∫—Ä–∏–π—Ç–µ —á–µ—Ä–µ–∑ Telegram.');
        trackError('Telegram API Not Found', 'User tried to check subscription without Telegram API');
        return false;
      }
      
      if (!tg) {
        console.error('WebApp –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ! –ù–∞–ª–∞—à—Ç—É–π—Ç–µ Menu Button –≤ BotFather.');
        trackError('WebApp Not Initialized', 'User tried to check subscription without WebApp initialized');
        return false;
      }
      
      if (!tg.initDataUnsafe) {
        console.error('initDataUnsafe –≤—ñ–¥—Å—É—Ç–Ω—ñ–π! Mini App –∑–∞–ø—É—â–µ–Ω–æ –Ω–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞.');
        trackError('initDataUnsafe Missing', 'User tried to check subscription without initDataUnsafe');
        return false;
      }
      
      if (!user) {
        console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
        trackError('User Data Not Found', 'Could not retrieve user data for subscription check');
        return false;
      }
      
      // –ó–∞–ø–∏—Ç –¥–æ –Ω–∞—à–æ–≥–æ –±–µ–∫–µ–Ω–¥—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏
      console.log('üåê –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –¥–æ:', `${BACKEND_URL}/api/check-subscription`);
      console.log('üì§ –î–∞–Ω—ñ –∑–∞–ø–∏—Ç—É:', {
        userId: user.id,
        channel: TELEGRAM_CHANNEL,
        initData: tg.initData ? 'present' : 'missing'
      });
      
      const response = await fetch(`${BACKEND_URL}/api/check-subscription`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: user.id,
          channel: TELEGRAM_CHANNEL,
          initData: tg.initData || '' // –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ
        })
      });
      
      console.log('üì• –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', response.status);
      
      if (!response.ok) {
        const error = await response.json();
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ API:', error);
        trackError('Subscription API Error', error.message);
        return false;
      }
      
      const data = await response.json();
      console.log('‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å API:', data);
      
      return data.isSubscribed;
      
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏:', error);
      trackError('Subscription Check Error', error.message);
      return false;
    } finally {
      setIsCheckingSubscription(false);
      trackSubscriptionCheck('check_subscription_finished');
    }
  };
  
  // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ"
  const handleDetailsClick = async (e) => {
    e.preventDefault();
    
    const isSubscribed = await checkChannelSubscription();
    
    if (isSubscribed) {
      // –Ø–∫—â–æ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π - –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
      const linkToOpen = selectedLocation.link || 'https://nohello.net/en/';
      openLink(linkToOpen);
      trackMapInteraction('details_link_opened', { 
        locationId: selectedLocation.id,
        locationTitle: selectedLocation.title,
        link: linkToOpen 
      });
    } else {
      // –Ø–∫—â–æ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π - –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø–∞–ø
      setShowSubscribeModal(true);
      trackMapInteraction('subscription_modal_shown', { 
        locationId: selectedLocation.id,
        locationTitle: selectedLocation.title 
      });
    }
  };
  
  // –û–±—Ä–æ–±–Ω–∏–∫ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
  const handleSubscribeClick = () => {
    window.open(TELEGRAM_CHANNEL_URL, '_blank');
    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    setShowSubscribeModal(false);
    trackMapInteraction('subscribe_button_clicked', { channel: TELEGRAM_CHANNEL });
    
    // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      // –ü–æ–≤—Ç–æ—Ä–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ—Å–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏
      checkChannelSubscription().then(isSubscribed => {
        if (isSubscribed) {
          const linkToOpen = selectedLocation?.link || 'https://nohello.net/en/';
          openLink(linkToOpen);
          trackMapInteraction('post_subscription_link_opened', { 
            locationId: selectedLocation?.id,
            locationTitle: selectedLocation?.title,
            link: linkToOpen 
          });
        }
      });
    }, 3000);
  };
  
  return (
    <Page back={false}>
      <div style={{height: '100vh', background: '#181818', padding: 0, position: 'relative'}}>
        <MapStub 
          showBanner={showBanner} 
          onCloseBanner={() => setShowBanner(false)} 
          onMarkerClick={handleMarkerClick}
          showFeedbackModal={showFeedbackModal}
          setShowFeedbackModal={setShowFeedbackModal}
        />
        {showTonBanner && selectedLocation && (
          <div style={{
            position: 'absolute',
            left: 0,
            right: 0,
            bottom: 0,
            zIndex: 9999,
            display: 'flex',
            justifyContent: 'center',
            pointerEvents: 'none',
            background: 'transparent',
          }}>
            <div style={{width: '100%', maxWidth: '100%', pointerEvents: 'auto'}}>
              <Banner
                before={<Image size={48} src={avatarIcon} />}
                callout={selectedLocation.address || "–ö–∏—ó–≤"}
                background={<img alt="Location background" src={selectedLocation.avatar} style={{width: '100%', height: '100%', opacity: 0.5, objectFit: "cover"}}/>}
                header={selectedLocation.title}
                subheader={selectedLocation.description || "–û–ø–∏—Å –ª–æ–∫–∞—Ü—ñ—ó"}
                type="section"
                onCloseIcon={() => setShowTonBanner(false)}
              >
                <Button
                  mode="white"
                  size="s"
                  onClick={handleDetailsClick}
                  loading={isCheckingSubscription}
                >
                  –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ
                </Button>
              </Banner>
            </div>
          </div>
        )}
        
        {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ */}
        {showSubscribeModal && (
          <div style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(0, 0, 0, 0.5)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 10000,
            padding: 20,
          }}>
            <div style={{
              backgroundColor: 'white',
              borderRadius: 16,
              padding: 24,
              maxWidth: 340,
              width: '100%',
              boxShadow: '0 4px 24px rgba(0, 0, 0, 0.15)',
            }}>
              <Headline weight="2" style={{ marginBottom: 12, textAlign: 'center' }}>
                –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
              </Headline>
              <Text style={{ marginBottom: 20, textAlign: 'center', color: '#666' }}>
                –©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –Ω–∞—à Telegram –∫–∞–Ω–∞–ª
              </Text>
              <div style={{ display: 'flex', flexDirection: 'column', gap: 8 }}>
                <Button
                  size="l"
                  stretched
                  onClick={handleSubscribeClick}
                >
                  –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
                </Button>
                <Button
                  mode="bezeled"
                  size="l"
                  stretched
                  onClick={() => setShowSubscribeModal(false)}
                >
                  –ó–∞–∫—Ä–∏—Ç–∏
                </Button>
              </div>
            </div>
        </div>
        )}
        
        {/* Modal —Ñ—ñ–¥–±–µ–∫—É –∑ Telegram UI */}
        <Modal
          open={showFeedbackModal}
          onOpenChange={setShowFeedbackModal}
        >
          <Modal.Header after={
            <Button mode="bezeled" size="s" onClick={() => setShowFeedbackModal(false)}>
              ‚úï
            </Button>
          }>
            –ó–≤'—è–∑–æ–∫
          </Modal.Header>
          
          <div style={{ padding: '16px 24px 24px 24px' }}>
            <Text style={{ display: 'block', marginBottom: 16, lineHeight: '1.5' }}>
              –Ø–∫—â–æ —É –≤–∞—Å —î –∑–∞—É–≤–∞–∂–µ–Ω–Ω—è, –ø—Ä–æ–±–ª–µ–º–∏ –≤ —Ä–æ–±–æ—Ç—ñ –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —â–æ–¥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–∏—à—ñ—Ç—å –Ω–∞–º.
            </Text>
            
            <Text style={{ display: 'block', marginBottom: 20, lineHeight: '1.5' }}>
              –¢–∞–∫–æ–∂ –≤ –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ ¬´–ì—É–ª—è–π, –ö–∏—ó–≤¬ª —Ç–∞ –Ω–∞ —Å–∞–º—ñ–π –∫–∞—Ä—Ç—ñ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–µ–∫–ª–∞–º–∞.
            </Text>
            
            <Button
              size="l"
              stretched
              onClick={() => window.open('https://t.me/pavlik_ads', '_blank')}
            >
              –ù–∞–ø–∏—Å–∞—Ç–∏
            </Button>
        </div>
        </Modal>
      </div>
    </Page>
  );
} 